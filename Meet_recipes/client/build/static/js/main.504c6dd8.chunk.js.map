{"version":3,"sources":["auth.js","components/Navbar.js","components/Recipe.js","components/Home.js","components/SignUp.js","components/Login.js","components/CreateRecipe.js","index.js"],"names":["createAuthProvider","accessTokenKey","onUpdateToken","token","fetch","method","body","refresh_token","then","r","json","useAuth","login","logout","LoggedInLinks","className","to","href","onClick","LoggedOutLinks","NavBar","logged","type","id","Recipe","title","description","onDelete","Card","Body","Title","Button","variant","LoggedinHome","useState","recipes","setRecipes","show","setShow","useForm","register","handleSubmit","reset","setValue","errors","formState","recipeId","setRecipeId","useEffect","res","data","catch","err","console","log","localStorage","getItem","deleteRecipe","requestOptions","headers","JSON","parse","Modal","size","onHide","Header","closeButton","Form","Group","Label","Control","required","maxLength","style","color","as","rows","stringify","window","location","reload","map","recipe","index","LoggedOutHome","HomePage","SignUpPage","serverResponse","setServerResponse","Alert","onClose","dismissible","placeholder","username","email","minLength","password","confirmPassword","message","alert","LoginPage","history","useHistory","access_token","push","CreateRecipePage","App","path","CreateRecipe","Login","SignUp","Home","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.504c6dd8.chunk.js","sourcesContent":["import {createAuthProvider} from 'react-token-auth'\r\n\r\nexport const [useAuth, authFetch, login, logout] =\r\n    createAuthProvider({\r\n        accessTokenKey: 'access_token',\r\n        onUpdateToken: (token) => fetch('/auth/refresh', {\r\n            method: 'POST',\r\n            body: token.refresh_token\r\n        })\r\n        .then(r => r.json())\r\n    })","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAuth ,logout} from '../auth'\r\n\r\n\r\n\r\n\r\nconst LoggedInLinks = () => {\r\n    return (\r\n        <>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link  active\" to=\"/create_recipe\">Create Recipes</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" href=\"#\" onClick={()=>{logout()}}>Log Out</a>\r\n            </li>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst LoggedOutLinks = () => {\r\n    return (\r\n        <>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" to=\"/signup\">Sign Up</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" to=\"/login\" >Login</Link>\r\n            </li>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst NavBar = () => {\r\n\r\n    const [logged] = useAuth();\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">Recipes</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul className=\"navbar-nav\">\r\n                        {logged?<LoggedInLinks/>:<LoggedOutLinks/>}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from 'react'\r\nimport { Button, Card ,Modal} from 'react-bootstrap';\r\n\r\n\r\nconst Recipe=({title,description,onClick,onDelete})=>{\r\n    return(\r\n        <Card className=\"recipe\">\r\n            <Card.Body>\r\n                <Card.Title>{title}</Card.Title>\r\n                <p>{description}</p>\r\n                <Button variant='primary' onClick={onClick}>Update</Button>\r\n                {' '}\r\n                <Button variant='danger' onClick={onDelete}>Delete</Button>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAuth } from '../auth'\r\nimport Recipe from './Recipe'\r\nimport { Modal ,Form,Button} from 'react-bootstrap'\r\nimport { useForm } from 'react-hook-form'\r\n\r\n\r\n\r\n\r\n\r\nconst LoggedinHome = () => {\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [show, setShow] = useState(false)\r\n    const {register,reset,handleSubmit,setValue,formState:{errors}}=useForm()\r\n    const [recipeId,setRecipeId]=useState(0);\r\n\r\n    useEffect(\r\n        () => {\r\n            fetch('/recipe/recipes')\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setRecipes(data)\r\n                })\r\n                .catch(err => console.log(err))\r\n        }, []\r\n    );\r\n\r\n    const getAllRecipes=()=>{\r\n        fetch('/recipe/recipes')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setRecipes(data)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    \r\n\r\n    const closeModal = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const showModal = (id) => {\r\n        setShow(true)\r\n        setRecipeId(id)\r\n        recipes.map(\r\n            (recipe)=>{\r\n                if(recipe.id==id){\r\n                    setValue('title',recipe.title)\r\n                    setValue('description',recipe.description)\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    let token=localStorage.getItem('REACT_TOKEN_AUTH_KEY')\r\n\r\n    const updateRecipe=(data)=>{\r\n        console.log(data)\r\n\r\n        \r\n\r\n        const requestOptions={\r\n            method:'PUT',\r\n            headers:{\r\n                'content-type':'application/json',\r\n                'Authorization':`Bearer ${JSON.parse(token)}`\r\n            },\r\n            body:JSON.stringify(data)\r\n        }\r\n\r\n\r\n        fetch(`/recipe/recipe/${recipeId}`,requestOptions)\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data)\r\n\r\n            const reload =window.location.reload()\r\n            reload() \r\n        })\r\n        .catch(err=>console.log(err))\r\n    }\r\n\r\n\r\n\r\n    const deleteRecipe=(id)=>{\r\n        console.log(id)\r\n        \r\n\r\n        const requestOptions={\r\n            method:'DELETE',\r\n            headers:{\r\n                'content-type':'application/json',\r\n                'Authorization':`Bearer ${JSON.parse(token)}`\r\n            }\r\n        }\r\n\r\n\r\n        fetch(`/recipe/recipe/${id}`,requestOptions)\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data)\r\n            getAllRecipes()\r\n        \r\n        })\r\n        .catch(err=>console.log(err))\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"recipes container\">\r\n            <Modal\r\n                show={show}\r\n                size=\"lg\"\r\n                onHide={closeModal}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        Update Recipe\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <form>\r\n                        <Form.Group>\r\n                            <Form.Label>Title</Form.Label>\r\n                            <Form.Control type=\"text\"\r\n                                {...register('title', { required: true, maxLength: 25 })}\r\n                            />\r\n                        </Form.Group>\r\n                        {errors.title && <p style={{ color: 'red' }}><small>Title is required</small></p>}\r\n                        {errors.title?.type === \"maxLength\" && <p style={{ color: 'red' }}>\r\n                            <small>Title should be less than 25 characters</small>\r\n                        </p>}\r\n                        <Form.Group>\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={5}\r\n                                {...register('description', { required: true, maxLength: 255 })}\r\n                            />\r\n                        </Form.Group>\r\n                        {errors.description && <p style={{ color: 'red' }}><small>Description is required</small></p>}\r\n                        {errors.description?.type === \"maxLength\" && <p style={{ color: 'red' }}>\r\n                            <small>Description should be less than 255 characters</small>\r\n                        </p>}\r\n                        <br></br>\r\n                        <Form.Group>\r\n                            <Button variant=\"primary\" onClick={handleSubmit(updateRecipe)}>\r\n                                Save\r\n                            </Button>\r\n                        </Form.Group>\r\n                    </form>\r\n                </Modal.Body>\r\n            </Modal>\r\n            <h1>List of Recipes</h1>\r\n            {\r\n                recipes.map(\r\n                    (recipe,index) => (\r\n                        <Recipe\r\n                             title={recipe.title}\r\n                            key={index}\r\n                            description={recipe.description}\r\n                            onClick={()=>{showModal(recipe.id)}}\r\n\r\n                            onDelete={()=>{deleteRecipe(recipe.id)}}\r\n\r\n                        />\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LoggedOutHome = () => {\r\n    return (\r\n        <div className=\"home container\">\r\n            <h1 className=\"heading\">Welcome to the Recipes</h1>\r\n            <Link to='/signup' className=\"btn btn-primary btn-lg\">Get Started</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst HomePage = () => {\r\n\r\n    const [logged] = useAuth()\r\n\r\n    return (\r\n        <div>\r\n            {logged ? <LoggedinHome /> : <LoggedOutHome />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage","import React, { useState } from 'react'\r\nimport { Form, Button, Alert } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\n\r\n\r\nconst SignUpPage = () => {\r\n\r\n\r\n    const { register, handleSubmit, reset, formState: { errors } } = useForm();\r\n    const [show,setShow]=useState(false)\r\n    const [serverResponse,setServerResponse]=useState('')\r\n\r\n    const submitForm = (data) => {\r\n\r\n\r\n        if (data.password === data.confirmPassword) {\r\n\r\n\r\n            const body = {\r\n                username: data.username,\r\n                email: data.email,\r\n                password: data.password\r\n            }\r\n\r\n            const requestOptions = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n\r\n\r\n            fetch('/auth/signup', requestOptions)\r\n                .then(res => res.json())\r\n                .then(data =>{\r\n                    console.log(data)\r\n                    setServerResponse(data.message)\r\n                    setShow(true)\r\n                })\r\n                .catch(err => console.log(err))\r\n\r\n            reset()\r\n        }\r\n\r\n        else {\r\n            alert(\"Passwords do not match\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form\">\r\n\r\n                \r\n               {show?\r\n               <>\r\n                <Alert variant=\"success\" onClose={() => {setShow(false)\r\n                }} dismissible>\r\n                <p>\r\n                   {serverResponse}\r\n                </p>\r\n                </Alert>\r\n\r\n                <h1>Sign Up Page</h1>\r\n                \r\n                </>\r\n                :\r\n                <h1>Sign Up Page</h1>\r\n               \r\n               }\r\n                <form>\r\n                    <Form.Group>\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            placeholder=\"Your username\"\r\n                            {...register(\"username\", { required: true, maxLength: 25 })}\r\n                        />\r\n\r\n                        {errors.username && <small style={{ color: \"red\" }}>Username is required</small>}\r\n                        {errors.username?.type === \"maxLength\" && <p style={{ color: \"red\" }}><small>Max characters should be 25 </small></p>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control type=\"email\"\r\n                            placeholder=\"Your email\"\r\n                            {...register(\"email\", { required: true, maxLength: 80 })}\r\n                        />\r\n\r\n                        {errors.email && <p style={{ color: \"red\" }}><small>Email is required</small></p>}\r\n\r\n                        {errors.email?.type === \"maxLength\" && <p style={{ color: \"red\" }}><small>Max characters should be 80</small></p>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\"\r\n                            placeholder=\"Your password\"\r\n                            {...register(\"password\", { required: true, minLength: 8 })}\r\n\r\n                        />\r\n\r\n                        {errors.password && <p style={{ color: \"red\" }}><small>Password is required</small></p>}\r\n                        {errors.password?.type === \"minLength\" && <p style={{ color: \"red\" }}><small>Min characters should be 8</small></p>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"Your password\"\r\n                            {...register(\"confirmPassword\", { required: true, minLength: 8 })}\r\n                        />\r\n                        {errors.confirmPassword && <p style={{ color: \"red\" }}><small>Confirm Password is required</small></p>}\r\n                        {errors.confirmPassword?.type === \"minLength\" && <p style={{ color: \"red\" }}><small>Min characters should be 8</small></p>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Button as=\"sub\" variant=\"primary\" onClick={handleSubmit(submitForm)}>SignUp</Button>\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <small>Already have an account, <Link to='/login'>Log In</Link></small>\r\n                    </Form.Group>\r\n                    <br></br>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpPage","import React, { useState } from 'react'\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport {useForm} from 'react-hook-form'\r\nimport { login } from '../auth'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\n\r\nconst LoginPage=()=>{\r\n    \r\n    const {register,handleSubmit,reset,formState:{errors}}=useForm()\r\n\r\n    const history=useHistory()\r\n    \r\n\r\n\r\n    const loginUser=(data)=>{\r\n       console.log(data)\r\n\r\n       const requestOptions={\r\n           method:\"POST\",\r\n           headers:{\r\n               'content-type':'application/json'\r\n           },\r\n           body:JSON.stringify(data)\r\n       }\r\n        \r\n       fetch('/auth/login',requestOptions)\r\n       .then(res=>res.json())\r\n       .then(data=>{\r\n           console.log(data.access_token)\r\n           \r\n           if (data){\r\n            login(data.access_token)\r\n\r\n            history.push('/')\r\n           }\r\n           else{\r\n               alert('Invalid username or password')\r\n           }\r\n\r\n\r\n       })\r\n\r\n\r\n\r\n       reset()\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n        <div className=\"form\">\r\n            <h1>Login Page</h1>\r\n            <form>\r\n                <Form.Group>\r\n                    <Form.Label>Username</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                        placeholder=\"Your username\"\r\n                        {...register('username',{required:true,maxLength:25})}\r\n                    />\r\n                </Form.Group>\r\n                {errors.username && <p style={{color:'red'}}><small>Username is required</small></p>}\r\n                {errors.username?.type === \"maxLength\" && <p style={{color:'red'}}><small>Username should be 25 characters</small></p>}\r\n                <br></br>\r\n               \r\n                <Form.Group>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type=\"password\"\r\n                        placeholder=\"Your password\"\r\n                        {...register('password',{required:true,minLength:8})}\r\n                    />\r\n                </Form.Group>\r\n                {errors.username && <p style={{color:'red'}}><small>Password is required</small></p>}\r\n                {errors.password?.type === \"maxLength\" && <p style={{color:'red'}}>\r\n                    <small>Password should be more than 8 characters</small>\r\n                    </p>}\r\n                <br></br>\r\n                <Form.Group>\r\n                    <Button as=\"sub\" variant=\"primary\" onClick={handleSubmit(loginUser)}>Login</Button>\r\n                </Form.Group>\r\n                <br></br>\r\n                <Form.Group>\r\n                    <small>Do not have an account? <Link to='/signup'>Create One</Link></small>\r\n                </Form.Group>\r\n                \r\n            </form>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage","import React, { useState } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useForm } from 'react-hook-form'\r\n\r\n\r\nconst CreateRecipePage = () => {\r\n\r\n    const { register, handleSubmit, reset, formState: { errors } } = useForm()\r\n    const [show,setShow]=useState(false);\r\n\r\n    const createRecipe = (data) => {\r\n        console.log(data)\r\n\r\n        const token = localStorage.getItem('REACT_TOKEN_AUTH_KEY');\r\n        console.log(token)\r\n\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'Authorization': `Bearer ${JSON.parse(token)}`\r\n            },\r\n            body: JSON.stringify(data)\r\n\r\n        }\r\n\r\n        fetch('/recipe/recipes', requestOptions)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                reset()\r\n            })\r\n            .catch(err => console.log(err))\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n           \r\n            <h1>Create A Recipe</h1>\r\n            <form>\r\n                <Form.Group>\r\n                    <Form.Label>Title</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                        {...register('title', { required: true, maxLength: 25 })}\r\n                    />\r\n                </Form.Group>\r\n                {errors.title && <p style={{ color: 'red' }}><small>Title is required</small></p>}\r\n                {errors.title?.type === \"maxLength\" && <p style={{ color: 'red' }}>\r\n                    <small>Title should be less than 25 characters</small>\r\n                </p>}\r\n                <Form.Group>\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={5}\r\n                        {...register('description', { required: true, maxLength: 255 })}\r\n                    />\r\n                </Form.Group>\r\n                {errors.description && <p style={{ color: 'red' }}><small>Description is required</small></p>}\r\n                {errors.description?.type === \"maxLength\" && <p style={{ color: 'red' }}>\r\n                    <small>Description should be less than 255 characters</small>\r\n                </p>}\r\n                <br></br>\r\n                <Form.Group>\r\n                    <Button variant=\"primary\" onClick={handleSubmit(createRecipe)}>\r\n                        Save\r\n                    </Button>\r\n                </Form.Group>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateRecipePage","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles/main.css'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport NavBar from './components/Navbar';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n} from 'react-router-dom'\r\nimport HomePage from './components/Home';\r\nimport SignUpPage from './components/SignUp';\r\nimport LoginPage from './components/Login';\r\nimport CreateRecipePage from './components/CreateRecipe';\r\n\r\n\r\n\r\n\r\nconst App=()=>{\r\n\r\n    \r\n    return (\r\n        <Router>\r\n        <div className=\"\">\r\n            <NavBar/>\r\n            <Switch>\r\n                <Route path=\"/create_recipe\">\r\n                    <CreateRecipePage/>\r\n                </Route>\r\n                <Route path=\"/login\">\r\n                    <LoginPage/>\r\n                </Route>\r\n                <Route path=\"/signup\">\r\n                    <SignUpPage/>                \r\n                </Route>    \r\n                <Route path=\"/\">\r\n                    <HomePage/>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'))"],"sourceRoot":""}